{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my site","text":"<p>Hello   welcome to my site   its time to select the lang   please select one of these 2 buttons and i will redirect u to your lang   - English   - Spanish </p> <p>dont forget to follow me on Github  or contact me using Telegram with my email (gkartyt@gmail.com)   or if u are interested visit my Linkedin  Thanks for watching this page     </p> <p></p>"},{"location":"en/","title":"Welcome to FPSensor page","text":"<p>Hello, i am Gonzalo Daroqui, i am a developer from argentina that does android development and also studying.    in this page u can find:    - Android Build Guide  - Git Guide</p>"},{"location":"en/build/","title":"The android build guide","text":"<p>on this guide i will explain u how to find device trees, prepare the env, requeriments, and more</p>"},{"location":"en/build/#reqs","title":"Reqs","text":"<ul> <li>64bit decent cpu</li> <li>32GB of RAM</li> <li>500GB+ space (SSD recommended)</li> <li>a good internet (or much patience)</li> <li>a brain</li> <li>a bit of knowledge of linux terminal</li> </ul>"},{"location":"en/build/#recomendations","title":"recomendations","text":"<ul> <li>do just Lineage <ul> <li>for the first try i recommend u that u try a simple rom, dont try aospa, aosp, etc. do a rom that all of us know that works well</li> </ul> </li> <li>learn git (a guide is coming soon)<ul> <li>its not necesary to make the rom but u will need it wen u want to do changes and u dont want to push commits without author and \"update x.x\" if u dont want the community hates u</li> </ul> </li> <li>dont ask for mainteinership<ul> <li>u did your rom? congrats, but u still have to learn a lot to be a maintainer of a rom, maintainer is a person that can update the rom constantly and can fix reported bugs reading logs and making changes in trees</li> </ul> </li> </ul>"},{"location":"en/build/#getting-server","title":"getting server","text":"<p>if u dont have the specs mentioned before u will need a server for that we have some options </p> <ul> <li>buy a server<ul> <li>since no one of server sellers  promote me i wont send u anyone but its really easy to find a server seller in tellegram, they usually manages on paypal</li> </ul> </li> <li>Google Cloud Platform Free triel<ul> <li>make a new google account since wen u have 0 credits u have to delete it</li> <li>u need a credit card (dw, no costs at all)</li> </ul> </li> </ul>"},{"location":"en/build/#getting-device-trees","title":"getting device trees","text":"<p>doesnt makes sense that we sync a rom if there is not device trees for my device so the next step is to look for a device tree how we plan to do that?</p> <p>first try, XDA    i have a Xiaomi Redmi Note 7 [lavender]   now we will ook for the xda   Redmi note 7 XDA   now in the xda    we will search for the topic roms or android development    now if there are we will search for lineage os or based roms    then we will search for kernel source (it will be always since its GPLv2 req)    </p> <p>xda has no luck?   lets try another   go to github.com    go to search button and search kernel_brand_device(or _soc ex sm8250)     </p> <p>if u found your device trees then lets come with the next step   if u have no luck then probably can contact me to see if we have luck, else the guide ends here for u    </p> <p>wen we have his kernel we will go to his github profile and look for these:</p> <ul> <li>device_brand_name</li> <li>vendor_brand_name</li> <li>kernel_brand_name (it can be kernel_brand_soc ex: sm8250)</li> <li>device_brand_soc-common (if exist)</li> <li>vendor_brand_soc-common (if exist)<ul> <li>for vendor repos if u found device and kernel from lineage org then there will be on TheMuppets org probably</li> </ul> </li> <li>hardware_brand (if exist, else we will take it from LineageOS organization)</li> </ul> <p>in some cases it will have android_, its the same, dont worry</p> <p>if we can find a local_manifests repo very good cuz we can use it, save it cuz will be important</p>"},{"location":"en/build/#preparing-the-env","title":"preparing the env","text":"<p>i recommend u to use Ubuntu (i use 20.04 but others should work too)</p> <pre><code>sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev python\nmkdir ~/bin\nPATH=~/bin:$PATH\ncurl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo\nchmod a+x ~/bin/repo\n\n# make a github account and fil the name and email\ngit config --global user.name \ngit config --global user.email \n</code></pre>"},{"location":"en/build/#sync-the-rom","title":"sync the rom","text":"<p>we will make a directory for the rom</p> <pre><code>mkdir LineageOS\ncd LineageOS\n</code></pre> <p>we will start the rom sync</p> <p>BUT WAIT WAIT WAIT you got a local_manifests repo? do this</p> <pre><code>git clone LINK .repo/local_manifests\n</code></pre> <p>now lets sync the rom be ready for a long time of downloading, have a good internet in that moment</p> <pre><code>repo init -u https://github.com/LineageOS/android.git -b lineage-XX (replace XX with lineage version, should be same as tree adroid version)\nrepo sync -c --no-clone-bundle -j12 --force-sync\n</code></pre> <p>u should get a message like \"Repo sync succesfully\"    </p> <p>ok so if we had local_manifest all things we need are cloned    else we will take a look on the repos we got   i will do a command for example and then u guys will reply    </p> <p>git clone https://github.com/android_device_motorola_rhode device/motorola/rhode -b [the branch should be the same as lineage or android version]   for example   git clone https://github.com/1/android_device_xiaomi_lavender device/xiaomi/lavender -b lineage-21    </p> <p>android_device_xiaomi_lavender   in the clkone path we do this   device/xiaomi/lavender   so we ignore the android_ or the proprietary_ and we replace these _ with /   done, we have all clonned    </p>"},{"location":"en/build/#prepare-device-trees-for-the-rom","title":"prepare device trees for the rom","text":"<p>we will move to device/brand/devicename   now we will look for AndroidProducts.mk   we will replace all xx_devicename with lineage_devicename    save and now we will search for xx_devicename.mk and rename as lineage_devicename.mk   in lineage_devicename.mk we will edit all xx_devicename with lineage_devicename   also we will replace vendor/xx with vendor/lineage   now in BoardConfig.mk or if we have a -common tree will move to the -common/BoardConfigCommon.mk   on it we will look if there is any vendor/xx definition and will replace with vendor/lineage   done, we will move back to main folder    </p>"},{"location":"en/build/#time-to-build","title":"time to build","text":"<p>we will do this</p> <pre><code>. build/envsetup.sh\nlunch lineage_devicename-userdebug\nm bacon\n</code></pre> <p>if everything goes well we will have the zip on out/target/product/devicename/   now test and good luck    </p>"},{"location":"en/build/#ask-me-a-question","title":"Ask me a question","text":"<p>want me to modify the guide? need help with the guide? contact me in my support group </p> <p>this guide was done with my hands, with my knowledge and never searched in another site for a reference wen writing (besides these env commands that i took from crDroid) so it may can have issues, make suggestions in my group</p> <p>thank you</p>"},{"location":"en/git/","title":"Git/Github/Gitlab guide","text":"<p>this guide will help u to start with git and some commands.   its basic so dont pretend that u will be expert after this.   u should have a git account of a git site ofc.   u should had installed git already    </p>"},{"location":"en/git/#initialize-my-first-repo","title":"initialize my first repo","text":"<p>new repo</p> <pre><code>mkdir repo\ncd repo\ngit init\n</code></pre>"},{"location":"en/git/#who-are","title":"who are ?","text":"<p>with the information u provided to create a account u have to fil this</p> <pre><code>git config --global user.name\ngit config --global user.email\n</code></pre>"},{"location":"en/git/#doing-our-first-change","title":"Doing our first change","text":"<pre><code>git branch -M master\ntouch hi\necho 1 &gt; hi\ngit add hi\ngit commit -m \"first hi public release\"\n</code></pre>"},{"location":"en/git/#pushing-to-our-repo","title":"pushing to our repo","text":"<p>in our github we should make a repository with the name we want to add to it   i want to clarify that i use github cuz its the more ommon but its the same for all    </p> <pre><code>git remote add origin https://github.com/FPSensor/hi\ngit push -f -u origin HEAD:master\n</code></pre>"},{"location":"en/git/#first-chaper-is-done-some-things-to-clarify","title":"first chaper is done, some things to clarify","text":"<p>1: we want u to be explicit with the commits, whats modified, with file, which section of the repo, anything, even in the description u should said why u did what    2: no need to put -m on the git commit command, if u dont add -m it will open the editor, this is better for long commit messages.   3: that larger push command is only for new branches, should be another way but if u clone the repo again a \"git push\" is enough    </p>"},{"location":"en/git/#clone-a-repo","title":"clone a repo","text":"<p>as simple as \"git clone link -b branch\"</p>"},{"location":"en/git/#who-did-this","title":"who did this?","text":"<p>i took a commit from another guy, how to recognize his work?   in android comunity we dont want people that doesnt add authors to commits and u will be like trash for they (i say by previous experiences) so,  we should add who did that. this will be applied for the previous commit, i will tell us how to do for others</p> <pre><code>git commit --amend --author=\"FPSensor &lt;gkartyt@gmail.com&gt;\"\n</code></pre> <p>but, how we got that info i took a commit from a repo where i was looking, how we can get that? in the commit link add .patch  this will literally make the commit a patch file, something that we will talk later about, but the point is: we can use it to get the author, check it.</p>"},{"location":"en/git/#i-want-a-cherry","title":"i want a cherry","text":"<p>a cherry pick is literally wn you pick commits from another repo to do it is really simple we have to initialize the repository and its changes with their commit hashes:</p> <pre><code>}git remote add cherrypick https://github.com/FPSensor/FPSensor\ngit fetch cherrypick\ngit cherry-pick hfwdhuwhfuiwuihfvuiwfhefhruifhfuihiuwe\n</code></pre> <p>u can just copy the hash from the commit  i have to pick 300 commits, how? things to have in account? its a start commit and a end commit, everything after the first commit and before the final commit will be picked, no metter what it is</p> <pre><code>git cherry-pick commit-start~..commit-end\n</code></pre> <p>oh, no we got a conflict of context at hi file</p> <p>how we look into it? a git conflict its where git dont know what to do cuz your source and the source of the repo before that commit are different its really simple</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n======= that source with the commit applied (should appear as a hash of commit)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; end of the confflict\n</code></pre> <p>we dont want to apply a commit cuz tons of confflicts and urlazy?</p> <pre><code>git cherry-pick --ship\n</code></pre> <p>this also applies for commits that was already dont and are uplicated</p>"},{"location":"en/git/#to-be-continued","title":"to be continued","text":""},{"location":"es/","title":"Spanish","text":"<p>Prueba de cambio de idioma</p>"}]}